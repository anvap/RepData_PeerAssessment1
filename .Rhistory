}
f <- function(x){
g <- function(y){
y+z
}
z <- 4
x+g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x<3){
NA
} else {
10
}
x <- 1L
x
rm(f)
rm(x)
rm(y)
rm(z)
h <- function(x,y=NULL,d=3L){
z <- cbind(x,d)
if(!is.null(y))
z <-z+y
else
z<-z+f
g<-x+y/z
if(d==3L)
return(g)
g<-g+10
g
}
h(1)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
(cran, r_version == "3.1.1", country == "US")
(cran,r_version == "3.1.1",country == "US")
filter(cran,r_version == "3.1.1",country == "US")
?Comparison
filter(cran,r_version == "3.0.2",country == "IN")
filter(cran,r_version <= "3.0.2",country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran2 <- select(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
pkg <- c("plyr", "dplyr", "reshape2")
new.pkg <- pkg[!(pkg %in% installed.packages())]
if (length(new.pkg)) {
install.packages(new.pkg)
}
# Check if dplyr is already loaded but plyr has not, detact the dplyr package as plyr should be loaded first.
environment <- search()
if ("package:dplyr" %in% environment){
if ("package:plyr" %in% environment){
print("error")
detach("package:dplyr", unload=TRUE)
}
}
for (package in pkg) {
require(package, character.only = TRUE)
}
# Remove the data from the environment as they are not needed anymore
rm(pkg,new.pkg,environment,package)
library(dplyr)
# Install and load the required libraries if they are not present yet
pkg <- c("plyr", "dplyr", "reshape2")
new.pkg <- pkg[!(pkg %in% installed.packages())]
if (length(new.pkg)) {
install.packages(new.pkg)
}
# Check if dplyr is already loaded but plyr has not, detact the dplyr package as plyr should be loaded first.
environment <- search()
if ("package:dplyr" %in% environment){
if ("package:plyr" %in% environment == FALSE){
print("error")
detach("package:dplyr", unload=TRUE)
}
}
for (package in pkg) {
require(package, character.only = TRUE)
}
# Remove the data from the environment as they are not needed anymore
rm(pkg,new.pkg,environment,package)
library(dplyr)
environment <- search()
if ("package:dplyr" %in% environment){
if ("package:plyr" %in% environment == FALSE){
detach("package:dplyr", unload=TRUE)
}
}
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
Diet
Bodyweight
BodyWeight
?points
?panel.abline
?axis
?panel.abline
?text
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?par
?trellis.par.set
?print.trellis
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
install.packages("mgvc")
install.packages("mgcv")
install.packages("mgcv")
qplot(votes, rating, data = movies) + geom_smooth()
library(ggplot2)
qplot(votes, rating, data = movies) + geom_smooth()
library(mgcv)
library(stats)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stat_smooth("loess")
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stat_smooth("loess")
?geom_smooth
qplot(wt, mpg, data=mtcars, colour=factor(cyl)) +
geom_smooth(aes(ymin = lcl, ymax = ucl), data=grid, stat="identity")
qplot(wt, mpg, data=mtcars, colour=factor(cyl)) +
geom_smooth()
?qplot
setwd("~/Documents/coursera/05_reproducible research/assignment 1/RepData_PeerAssessment1")
rm(list=ls())
## Loading and preprocessing the data
zipfile = "activity.zip"
csvfile = "activity.csv"
if(!file.exists(csvfile)){
if(file.exists(zipfile)){
unzip(zipfile)
}
}
activity <- read.csv(csvfile)
timeformat <- "%Y-%m-%d"
activity$date <- as.Date(activity$date, timeformat)
## What is mean total number of steps taken per day?
require(plyr)
require(dplyr)
?summarize
summarize(group_by(activity, date), mean(steps))
summarize(group_by(activity, date), mean(steps, na.rm = TRUE))
totalStepsPerDay <- summarize(group_by(activity, date), mean(steps, na.rm = TRUE))
View(totalStepsPerDay)
?mean
?dplyr
totalStepsPerDay[is.na(totalStepsPerDay)] <- 0
View(totalStepsPerDay)
?qplot
require(ggplot2)
qplot(totalStepsPerDay)
View(totalStepsPerDay)
?summarize
qplot(data = totalStepsPerDay)
qplot(data = totalStepsPerDay)
totalStepsPerDay <- summarize(group_by(activity, date), steps = mean(steps, na.rm = TRUE))
View(totalStepsPerDay)
qplot(steps, data = totalStepsPerDay)
qplot(date, data = totalStepsPerDay)
qplot(date, data = totalStepsPerDay, binwidth = 1)
qplot(date, data = totalStepsPerDay, g, stat="bin")
qplot(date, data = totalStepsPerDay, stat="bin")
qplot(date, data = totalStepsPerDay, stat="bin", binwidth=1)
qplot(date, data = totalStepsPerDay, )
qplot(date, data = totalStepsPerDay, geom="histogram")
qplot(date, data = totalStepsPerDay, binwidth=0.01)
qplot(date, data = totalStepsPerDay, binwidth=0.1)
qplot(date, data = totalStepsPerDay, binwidth=0.2)
qplot(steps, data = totalStepsPerDay, binwidth=0.2)
qplot(date, data = totalStepsPerDay, stat='identity')
?stat
ggplot(totalStepsPerDay, aes(x = date, y = steps)) + geom_bar(stat = "identity")
rm(list=ls())
zipfile = "activity.zip"
csvfile = "activity.csv"
if(!file.exists(csvfile)){
if(file.exists(zipfile)){
unzip(zipfile)
}
}
activity <- read.csv(csvfile)
timeformat <- "%Y-%m-%d"
activity$date <- as.Date(activity$date, timeformat)
require(plyr)
require(dplyr)
require(ggplot2)
totalStepsPerDay <- summarize(group_by(activity, date), steps = mean(steps, na.rm = TRUE))
#totalStepsPerDay[is.na(totalStepsPerDay)] <- 0
ggplot(totalStepsPerDay, aes(x = date, y = steps)) + geom_bar(stat = "identity")
?mean
?median
meanSteps <- mean(totalStepsPerDay$steps, na.rm = TRUE)
meanSteps <- median(totalStepsPerDay$steps, na.rm = TRUE)
mean(totalStepsPerDay$steps, na.rm = TRUE)
median(totalStepsPerDay$steps, na.rm = TRUE)
rm(meanSteps)
avgStepsPerDay <- summarize(group_by(activity, date), steps = avg(steps, na.rm = TRUE))
avgStepsPerDay <- summarize(group_by(activity, date), steps = average(steps, na.rm = TRUE))
activity <- mutate(activity, dayInterval = date + interval)
View(activity)
rm(list=ls())
zipfile = "activity.zip"
csvfile = "activity.csv"
if(!file.exists(csvfile)){
if(file.exists(zipfile)){
unzip(zipfile)
}
}
activity <- read.csv(csvfile)
timeformat <- "%Y-%m-%d"
activity$date <- as.Date(activity$date, timeformat)
activity$dayInterval <- paste(date, interval)
activity$dayInterval <- paste(activity$date, activity$interval)
View(activity)
unique(activity$dayInterval)
count(unique(activity$dayInterval))
count(unique(activity$dayInterval))
?count
test <- unique(activity$dayInterval)
rm(test)
rm(list=ls())
zipfile = "activity.zip"
csvfile = "activity.csv"
if(!file.exists(csvfile)){
if(file.exists(zipfile)){
unzip(zipfile)
}
}
activity <- read.csv(csvfile)
timeformat <- "%Y-%m-%d"
activity$date <- as.Date(activity$date, timeformat)
View(activity)
require(plyr)
require(dplyr)
require(ggplot2)
totalStepsPerDay <- summarize(group_by(activity, date), steps = mean(steps, na.rm = TRUE))
ggplot(totalStepsPerDay, aes(x = date, y = steps)) + geom_bar(stat = "identity")
mean(totalStepsPerDay$steps, na.rm = TRUE)
median(totalStepsPerDay$steps, na.rm = TRUE)
stepsPerInterval <- summarize(group_by(activity, interval), steps = mean(steps, na.rm = TRUE))
View(stepsPerInterval)
plot(stepsPerInterval$steps, type=”l”)
View(stepsPerInterval)
?plot
plot(x = stepsPerInterval$steps,y = stepsPerInterval$steps, type=”l”)
plot(x = stepsPerInterval$steps, y = stepsPerInterval$steps, type=”l”)
plot(x= stepsPerInterval$steps, y = stepsPerInterval$steps, type="l")
plot(x= stepsPerInterval$interval, y = stepsPerInterval$steps, type="l")
max(stepsPerInterval$steps)
summarize(stepsPerInterval, max(steps, na.rm = TRUE))
summarize(stepsPerInterval, max(steps, na.rm = TRUE), interval)
summarize(stepsPerInterval, interval, max(steps, na.rm = TRUE))
?filter
filter(stepsPerInterval, steps == max(steps))
?is.na
is.na(activity$steps)
count(is.na(activity$steps))
sum(is.na(activity$steps))
?mutate
activityNoMissingData <- mutate(activity, steps = ifelse(is.na(steps), interval, steps))
View(activityNoMissingData)
stepsPerInterval[interval==0]
stepsPerInterval[stepsPerInterval$interval==0]
View(stepsPerInterval)
stepsPerInterval[,stepsPerInterval$interval==0]
stepsPerInterval[stepsPerInterval$interval==0,]
View(stepsPerInterval)
stepsPerInterval[stepsPerInterval$interval==0,]$steps
activityNoMissingData <- mutate(activity, steps = ifelse(is.na(steps), stepsPerInterval[stepsPerInterval$interval==interval,]$steps, steps))
class(activity$interval)
class(stepsPerInterval$interval)
sessionInfo()
filter(stepsPerInterval, steps == max(steps))
mean(totalStepsPerDay$steps, na.rm = TRUE)
stepsPerInterval[stepsPerInterval$interval==35,]$steps
?as.integer
stepsPerInterval[stepsPerInterval$interval==as.integer(35),]$steps
activityNoMissingData <- mutate(activity, steps = ifelse(is.na(steps), stepsPerInterval[stepsPerInterval$interval==interval,]$steps, steps))
activityNoMissingData <- mutate(activity, steps = ifelse(is.na(steps), stepsPerInterval[stepsPerInterval$interval==activity$interval,]$steps, steps))
activityNoMissingData <- activity
activityNoMissingData[is.na(steps)] <- stepsPerInterval[stepsPerInterval$interval==activityNoMissingData$interval,]$steps
activityNoMissingData <- activity
activityNoMissingData[is.na(activityNoMissingData$steps)] <- stepsPerInterval[stepsPerInterval$interval==activityNoMissingData$interval,]$steps
activityNoMissingData[is.na(activityNoMissingData$steps)]
activityNoMissingData[is.na(activityNoMissingData$steps),]
activityNoMissingData[is.na(activityNoMissingData$steps),] <- stepsPerInterval[stepsPerInterval$interval==activityNoMissingData$interval,]$steps
?replace
?match
stepsPerInterval[stepsPerInterval$interval==35,]$steps
sstr[sstr %in% c(letters, LETTERS)]
match(35, stepsPerInterval$interval)
stepsPerInterval[match(35, stepsPerInterval$interval)]
stepsPerInterval[match(35, stepsPerInterval$interval),]
stepsPerInterval[match(35, stepsPerInterval$interval),]$steps
activityNoMissingData <- mutate(activity, steps = ifelse(is.na(steps), stepsPerInterval[match(interval, stepsPerInterval$interval),]$steps, steps))
View(activityNoMissingData)
stepsPerInterval$steps[match(35, stepsPerInterval$interval),]
stepsPerInterval$steps[match(35, stepsPerInterval$interval),]
stepsPerInterval[match(35, stepsPerInterval$interval),]$steps
activityNoMissingData$steps <- ifelse(is.na(activityNoMissingData$steps), stepsPerInterval[match(activityNoMissingData$interval, stepsPerInterval$interval),]$steps, activityNoMissingData$steps)
View(activityNoMissingData)
stepsPerInterval[match(0, stepsPerInterval$interval),]$steps
stepsPerInterval[match(5, stepsPerInterval$interval),]$steps
rm(activityNoMissingData)
activityNoMissingData <- activity
activityNoMissingData$steps <- ifelse(is.na(activityNoMissingData$steps), stepsPerInterval[match(activityNoMissingData$interval, stepsPerInterval$interval),]$steps, activityNoMissingData$steps)
View(activityNoMissingData)
totalStepsPerDay2 <- summarize(group_by(activity, date), steps = mean(steps))
ggplot(totalStepsPerDay2, aes(x = date, y = steps)) + geom_bar(stat = "identity")
mean(totalStepsPerDay2$steps)
median(totalStepsPerDay2$steps)
View(totalStepsPerDay2)
View(totalStepsPerDay)
totalStepsPerDay2 <- summarize(group_by(activityNoMissingData, date), steps = mean(steps))
ggplot(totalStepsPerDay2, aes(x = date, y = steps)) + geom_bar(stat = "identity")
mean(totalStepsPerDay2$steps)
median(totalStepsPerDay2$steps)
mean(totalStepsPerDay$steps, na.rm = TRUE)
median(totalStepsPerDay$steps, na.rm = TRUE)
?weekday
?weekdays
activityNoMissingData <- mutate(activityNoMissingData, weekday=weekdays(date))
View(activityNoMissingData)
activityNoMissingData %>%
mutate(weekday=weekdays(date)) %>%
mutate(weekday!=c("Saterday", "Sunday"))
View(activityNoMissingData)
activityNoMissingData <- activity
activityNoMissingData$steps <- ifelse(is.na(activityNoMissingData$steps), stepsPerInterval[match(activityNoMissingData$interval, stepsPerInterval$interval),]$steps, activityNoMissingData$steps)
activityNoMissingData %>%
mutate(weekday=weekdays(date)) %>%
mutate(weekday!=c("Saterday", "Sunday"))
activityNoMissingData <- activityNoMissingData %>%
mutate(weekday=weekdays(date)) %>%
mutate(weekday!=c("Saterday", "Sunday"))
View(activityNoMissingData)
tail(activityNoMissingData)
View(activityNoMissingData)
activityNoMissingData <- activityNoMissingData %>%
mutate(day=weekdays(date)) %>%
mutate(weekday = day!=c("Saterday", "Sunday"))
View(activityNoMissingData)
select(activityNoMissingData, day = Sunday)
select(activityNoMissingData, day = "Sunday")
select(activityNoMissingData, day == "Sunday")
?select
?filter
filter(activityNoMissingData, day == "Sunday")
test <- filter(activityNoMissingData, day == "Sunday")
View(test)
rm(list=ls())
zipfile = "activity.zip"
csvfile = "activity.csv"
if(!file.exists(csvfile)){
if(file.exists(zipfile)){
unzip(zipfile)
}
}
activity <- read.csv(csvfile)
timeformat <- "%Y-%m-%d"
activity$date <- as.Date(activity$date, timeformat)
require(plyr)
require(dplyr)
require(ggplot2)
totalStepsPerDay <- summarize(group_by(activity, date), steps = mean(steps, na.rm = TRUE))
ggplot(totalStepsPerDay, aes(x = date, y = steps)) + geom_bar(stat = "identity")
mean(totalStepsPerDay$steps, na.rm = TRUE)
median(totalStepsPerDay$steps, na.rm = TRUE)
stepsPerInterval <- summarize(group_by(activity, interval), steps = mean(steps, na.rm = TRUE))
plot(x=stepsPerInterval$interval, y = stepsPerInterval$steps, type="l")
filter(stepsPerInterval, steps == max(steps))
## Imputing missing values
sum(is.na(activity$steps))
activityNoMissingData <- activity
activityNoMissingData$steps <- ifelse(is.na(activityNoMissingData$steps), stepsPerInterval[match(activityNoMissingData$interval, stepsPerInterval$interval),]$steps, activityNoMissingData$steps)
totalStepsPerDay2 <- summarize(group_by(activityNoMissingData, date), steps = mean(steps))
ggplot(totalStepsPerDay2, aes(x = date, y = steps)) + geom_bar(stat = "identity")
mean(totalStepsPerDay2$steps)
median(totalStepsPerDay2$steps)
mean(totalStepsPerDay$steps, na.rm = TRUE)
median(totalStepsPerDay$steps, na.rm = TRUE)
## Are there differences in activity patterns between weekdays and weekends?
View(activityNoMissingData)
View(activityNoMissingData)
activityNoMissingData$weekday <- ifelse(weekday(activityNoMissingData$date) == "Saterday" || weekday(activityNoMissingData$date) == "Sunday", "Weekend", "Weekday")
activityNoMissingData$weekday <- ifelse(weekdays(activityNoMissingData$date) == "Saterday" || weekdays(activityNoMissingData$date) == "Sunday", "Weekend", "Weekday")
View(activityNoMissingData)
test <- filter(activityNoMissingData, weekday == "Weekend")
View(test)
activityNoMissingData$day <- ifelse(weekdays(activityNoMissingData$date) == "Saterday" & weekdays(activityNoMissingData$date) == "Sunday", "Weekend", "Weekday")
test <- filter(activityNoMissingData, weekday == "Weekend")
View(test)
activityNoMissingData$day <- ifelse(weekdays(activityNoMissingData$date) == "Saterday", "Weekend", "Weekday")
test <- filter(activityNoMissingData, weekday == "Weekend")
weekdays(activityNoMissingData[,1]$date)
activityNoMissingData[,1]$date
activityNoMissingData[,1]
activityNoMissingData[1,]
activityNoMissingData[1,]$date
weekdays(activityNoMissingData[1,]$date)
weekdays(activityNoMissingData[100,]$date)
weekdays(activityNoMissingData[300,]$date)
weekdays(activityNoMissingData[900,]$date)
weekdays(activityNoMissingData[1300,]$date)
weekdays(activityNoMissingData[1600,]$date)
activityNoMissingData$day <- ifelse(weekdays(activityNoMissingData$date) == "Saturday", "Weekend", "Weekday")
test <- filter(activityNoMissingData, weekday == "Weekend")
test <- filter(activityNoMissingData, day == "Weekend")
View(test)
rm(list=ls())
zipfile = "activity.zip"
csvfile = "activity.csv"
if(!file.exists(csvfile)){
if(file.exists(zipfile)){
unzip(zipfile)
}
}
activity <- read.csv(csvfile)
timeformat <- "%Y-%m-%d"
activity$date <- as.Date(activity$date, timeformat)
require(plyr)
require(dplyr)
require(ggplot2)
totalStepsPerDay <- summarize(group_by(activity, date), steps = mean(steps, na.rm = TRUE))
#totalStepsPerDay[is.na(totalStepsPerDay)] <- 0
ggplot(totalStepsPerDay, aes(x = date, y = steps)) + geom_bar(stat = "identity")
mean(totalStepsPerDay$steps, na.rm = TRUE)
median(totalStepsPerDay$steps, na.rm = TRUE)
stepsPerInterval <- summarize(group_by(activity, interval), steps = mean(steps, na.rm = TRUE))
plot(x=stepsPerInterval$interval, y = stepsPerInterval$steps, type="l")
filter(stepsPerInterval, steps == max(steps))
## Imputing missing values
sum(is.na(activity$steps))
activityNoMissingData <- activity
activityNoMissingData$steps <- ifelse(is.na(activityNoMissingData$steps), stepsPerInterval[match(activityNoMissingData$interval, stepsPerInterval$interval),]$steps, activityNoMissingData$steps)
totalStepsPerDay2 <- summarize(group_by(activityNoMissingData, date), steps = mean(steps))
ggplot(totalStepsPerDay2, aes(x = date, y = steps)) + geom_bar(stat = "identity")
mean(totalStepsPerDay2$steps)
median(totalStepsPerDay2$steps)
mean(totalStepsPerDay$steps, na.rm = TRUE)
median(totalStepsPerDay$steps, na.rm = TRUE)
activityNoMissingData$day <- ifelse(weekdays(activityNoMissingData$date) == "Saturday", "Weekend", ifelse(weekdays(activityNoMissingData$date) == "Sunday", "Weekend", "Weekday"))
test <- filter(activityNoMissingData, day == "Weekend")
View(test)
?plot
plot(x=stepsPerInterval$interval, y = stepsPerInterval$steps, type="l")
ggplot(totalStepsPerDay, aes(x = date, y = steps)) + geom_bar(stat = "identity")
ggplot(totalStepsPerDay2, aes(x = date, y = steps)) + geom_bar(stat = "identity")
plot(x=stepsPerInterval$interval, y = stepsPerInterval$steps, type="l")
plot(x=stepsPerInterval$interval, y = stepsPerInterval$steps, type="l", xlab="interval", ylab="steps")
View(activityNoMissingData)
ggplot(activityNoMissingData, aes(x=interval, y=steps, group=day)) + geom_line()
ggplot(activityNoMissingData, aes(x=interval, y=steps)) + geom_line() + + facet_grid(. ~ day)
ggplot(activityNoMissingData, aes(x=interval, y=steps)) + geom_line() + facet_grid(. ~ day)
ggplot(activityNoMissingData, aes(x=interval, y=steps)) + geom_line() + facet_grid(day ~ .)
mean(totalStepsPerDay2$steps) - mean(totalStepsPerDay$steps, na.rm = TRUE)
median(totalStepsPerDay2$steps) - median(totalStepsPerDay$steps, na.rm = TRUE)
